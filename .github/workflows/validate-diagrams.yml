name: Validate Structurizr DSL

on:
  pull_request:
    paths:
      - "**.dsl"
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    runs-on: ubuntu-latest
    container: ghcr.io/sebastienfi/structurizr-cli-with-bonus:latest
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Git Safe Directory
        run: git config --global --add safe.directory /__w/docs/docs

      - name: Get changed DSL files
        id: changed-files
        run: |
          git fetch origin ${{ github.base_ref }}
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.dsl$' || echo "")
          echo "DSL files changed: $CHANGED_FILES"
          echo "workspace=$CHANGED_FILES" >> $GITHUB_OUTPUT

      - name: Validate DSL
        run: |
          for file in ${{ steps.changed-files.outputs.workspace }}; do
            echo "Validating $file"
            /usr/local/structurizr-cli/structurizr.sh validate -workspace "$file"
          done

      - name: Generate Diagram Images
        run: |
          mkdir -p diagrams
          for file in ${{ steps.changed-files.outputs.workspace }}; do
            echo "Generating diagrams for $file"
            /usr/local/structurizr-cli/structurizr.sh export -workspace "$file" -format plantuml -output diagrams
          done
          cd diagrams
          echo 'Generating PNGs...'
          plantuml -tpng *.puml

      - name: Create PR Comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            try {
              // Read all PNG files from diagrams directory
              const diagramsDir = 'diagrams';
              if (!fs.existsSync(diagramsDir)) {
                console.log('No diagrams directory found');
                return;
              }
              
              const files = fs.readdirSync(diagramsDir)
                .filter(file => file.endsWith('.png'));
              
              if (files.length === 0) {
                console.log('No PNG files found in diagrams directory');
                return;
              }
              
              // Convert images to base64
              const images = files.map(file => {
                const filePath = path.join(diagramsDir, file);
                const base64 = fs.readFileSync(filePath, 'base64');
                return {
                  name: file.replace('.png', ''),
                  data: base64
                };
              });
              
              // Create comment content
              let comment = '### ðŸŽ¨ Structurizr Diagram Updates\n\n';
              comment += 'The following diagrams were updated in this PR:\n\n';
              
              images.forEach(image => {
                comment += `#### ${image.name}\n`;
                comment += `![${image.name}](data:image/png;base64,${image.data})\n\n`;
              });
              
              try {
                // Find existing comments
                const { data: comments } = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.name,
                  issue_number: context.issue.number
                });
                
                const botComment = comments.find(comment => 
                  comment.body.includes('ðŸŽ¨ Structurizr Diagram Updates')
                );
                
                if (botComment) {
                  // Update existing comment
                  await github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.name,
                    comment_id: botComment.id,
                    body: comment
                  });
                  console.log('Updated existing comment');
                } else {
                  // Create new comment
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.name,
                    issue_number: context.issue.number,
                    body: comment
                  });
                  console.log('Created new comment');
                }
              } catch (error) {
                console.log('Error handling comments:', error);
                // If updating/finding comment fails, try to create a new one
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.name,
                  issue_number: context.issue.number,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Error in script execution:', error);
            }
